{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","className","style","height","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setAutoScroll","current","scrollIntoView","behavior","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","gutter","padding","marginLeft","marginRight","xs","sm","display","alignItems","paddingLeft","paddingRight","alt","src","photo","width","borderRadius","userName","Form","useForm","form","bottom","position","name","initialValues","remember","onFinish","values","username","sendMessage","resetFields","onFinishFailed","errorInfo","console","log","autoComplete","span","Item","rows","textAlign","disabled","type","htmlType","ChatPage"],"mappings":"gOAgBMA,EAAiB,WAEnB,IAAMC,EAAwBC,cACxBC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,sBAAKC,UAAU,YAAYC,MAAO,CAAEC,OAAQ,uBAA5C,UACS,UAAXT,GAAsB,6EACvB,qCACI,cAACU,EAAD,IACA,cAACC,EAAD,WAMND,EAAqB,WACvB,IAAME,EAAWX,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKS,YAC3DC,EAAoBC,iBAAuB,MACjD,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAqBC,EAArB,KAeA,OANAb,qBAAU,WACW,IAAD,EAAbY,IACC,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAEG,sBAAKJ,MAAO,CAACC,OAAQ,oBAAqBY,UAAW,QAASC,SAd/C,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC5Ed,GAAgBC,GAAc,GAE/BD,GAAgBC,GAAc,IAS/B,UACFL,EAASmB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAKxB,QAGZqB,EAAmDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAClE,OACI,eAAC,IAAD,CAAKK,OAAQ,GAAIhC,MAAO,CAACiC,QAAS,UAAWC,WAAY,EAAGC,YAAa,GAAzE,UACI,cAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGrC,MAAO,CAACsC,QAAS,OAAQC,WAAY,SAAUC,YAAa,EAAGC,aAAc,GAAhG,SACI,qBAAKC,IAAI,GAAGC,IAAKhB,EAAQiB,MAAO5C,MAAO,CAAC6C,MAAO,OAAQC,aAAc,WAEzE,cAAC,IAAD,CAAKV,GAAI,GAAIC,GAAI,GAAjB,SACI,sBAAKrC,MAAO,CAACiC,QAAS,SAAtB,UACI,4BAAIN,EAAQoB,WACZ,uBACCpB,EAAQA,mBAQvBxB,EAA2B,WAC7B,MAAe6C,IAAKC,UAAbC,EAAP,oBACM5D,EAAwBC,cACxBC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OACI,qBAAKQ,MAAO,CAACmD,OAAQ,EAAGC,SAAU,WAAYP,MAAO,qBAArD,SACI,cAAC,IAAD,CACIK,KAAMA,EACNG,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BC,SAfK,SAACC,GACVA,EAAOC,WACXpE,EAASqE,YAAYF,EAAOC,WAC5BR,EAAKU,gBAaGC,eAVW,SAACC,GACpBC,QAAQC,IAAI,UAAWF,IAUfG,aAAa,MANjB,SAgBI,eAAC,IAAD,CAAKjC,OAAQ,GAAb,UACI,cAAC,IAAD,CAAKkC,KAAM,GAAX,SACI,cAAC,IAAKC,KAAN,CAAWd,KAAK,WAAhB,SACI,cAAC,IAAD,CAAUe,KAAM,QAIxB,cAAC,IAAD,CAAKF,KAAM,EAAGlE,MAAO,CAACqE,UAAW,OAAjC,SACI,cAAC,IAAKF,KAAN,UACI,cAAC,IAAD,CAAQG,SAAqB,UAAX9E,EAAoB+E,KAAK,UAAUC,SAAS,SAA9D,8BAebC,UA7HY,WACvB,OAAO,qBAAKzE,MAAO,CAACoD,SAAU,YAAvB,SACH,cAAC/D,EAAD","file":"static/js/6.bb9a0428.chunk.js","sourcesContent":["import { Button, Col, Form, Row } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\nimport { sendMessage, startMessagesListening, stopMessagesListening } from \"../../redux/chat-reducer\";\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\n\nconst ChatPage: React.FC = () => {\n    return <div style={{position: 'relative'}}>\n        <Chat />\n    </div>\n}\n\n\nconst Chat: React.FC = () => {\n    \n    const dispatch: AppDispatch = useDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n    \n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return <div className=\"mainFrame\" style={{ height: 'calc(100vh - 176px)'}}>\n        {status === 'error' && <div>Some error ocured. Please refresh the page</div>}\n        <>\n            <Messages />\n            <AddMessageForm />\n        </>\n    \n    </div>\n}\n\nconst Messages: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    const [isAutoScroll, setAutoScroll] = useState(true)\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300){\n            !isAutoScroll && setAutoScroll(true)\n        } else {\n            isAutoScroll && setAutoScroll(false)\n        }\n    }\n    useEffect(() => {\n        if(isAutoScroll){\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\n        }\n    }, [messages])\n\n    return <div style={{height: 'calc(100% - 80px)', overflowY: 'auto'}} onScroll={scrollHandler}>\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)} \n        <div ref={messagesAnchorRef}></div>\n    </div>\n}\nconst Message: React.FC<{message: ChatMessageAPIType}> = React.memo(({message}) => {\n    return (\n        <Row gutter={24} style={{padding: '4px 0px', marginLeft: 0, marginRight: 0}}>\n            <Col xs={2} sm={1} style={{display: 'flex', alignItems: 'center', paddingLeft: 0, paddingRight: 0}}>\n                <img alt=\"\" src={message.photo} style={{width: '30px', borderRadius: '50%'}}/>\n            </Col>\n            <Col xs={21} sm={23}>\n                <div style={{padding: '4px 0'}}>\n                    <b>{message.userName}</b>\n                    <br />\n                    {message.message}\n                </div>\n                \n            </Col>\n        </Row>\n    )\n})\n\nconst AddMessageForm: React.FC = () => {\n    const [form] = Form.useForm();\n    const dispatch: AppDispatch = useDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n    const onFinish = (values: any) => {\n        if(!values.username) return\n        dispatch(sendMessage(values.username))\n        form.resetFields();\n    };\n    \n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo);\n    };\n    return (\n        <div style={{bottom: 0, position: 'absolute', width: 'calc(100% - 4rem)'}}>\n            <Form\n                form={form}\n                name=\"basic\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n                {/* <Form.Item name=\"username\">\n                    <TextArea rows={4} />\n                </Form.Item>\n                <Form.Item>\n                    <Button disabled={status !== 'ready'} type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item> */}\n                <Row gutter={24}>\n                    <Col span={20}>\n                        <Form.Item name=\"username\">\n                            <TextArea rows={3} />\n                        </Form.Item>\n                    </Col>\n                   \n                    <Col span={4} style={{textAlign: 'end'}}>\n                        <Form.Item>\n                            <Button disabled={status !== 'ready'} type=\"primary\" htmlType=\"submit\">\n                                Send\n                            </Button>\n                        </Form.Item> \n                    </Col>\n                </Row>\n                \n            </Form>\n        </div>\n        \n    )\n}\n\n\n\nexport default ChatPage\n\n"],"sourceRoot":""}