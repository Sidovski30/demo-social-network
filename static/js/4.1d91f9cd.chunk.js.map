{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Posts/Post/Post.jsx","components/Profile/Posts/Posts.jsx","components/Profile/Posts/PostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.js"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","ss","formSummaryError","Field","placeholder","name","component","Input","type","TextArea","Object","keys","contacts","map","key","s","contact","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","isOwner","goToEditMode","onClick","contactTitle","contactValue","Contact","href","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","incognito","mainPhoto","alt","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","Posts","React","memo","postData","posts","i","index","postBlock","AddNewPostForm","values","addPost","newPostText","validate","required","PostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.1d91f9cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"Posts_postBlock__2qcb3\",\"posts\":\"Posts_posts__tkALa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2EmvQ\"};","import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode && \n                <div>\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input \n                    onChange={onStatusChange} \n                    onBlur={deactivateEditMode} \n                    autoFocus={true} \n                    value={status}/>\n                </div>\n            }\n            \n        </div>\n    )\n    \n    \n}\n\nexport default ProfileStatusWithHooks","import React from \"react\"\nimport s from './ProfileInfo.module.css'\nimport ss from '../../../components/common/FormsControls/FormsControls.module.css'\nimport { reduxForm, Field} from \"redux-form\"\nimport { required } from \"../../../utils/validators/validators\"\nimport {createField, Input, TextArea} from \"../../common/FormsControls/FormsControls\"\n\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>SAVE</button></div>\n        {error && <div className={ss.formSummaryError}>{error}</div>}\n        <div>\n            <b>Full name: </b> \n            <Field placeholder={'Full name'} name={'fullName'}  component={Input}/>\n        </div>\n        <div>\n            <b>Looking for a job: </b>\n            <Field placeholder={''} name={'lookingForAJob'}  component={Input} type='checkbox'/>\n        </div>\n        <div>\n            <b>My skills: </b>\n            <Field placeholder={'My skills'} name={'lookingForAJobDescription'}  component={TextArea}/>\n        </div>\n        \n        <div>\n            <b>About me: </b>\n            <Field placeholder={'About me'} name={'aboutMe'}  component={TextArea}/>\n        </div>\n\n        <div><b>Contacts: </b>{Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n                    <b>{key}: <Field placeholder={''} name={`contacts.${key}`}  component={Input}/></b>\n                </div>\n        })}</div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\nexport default ProfileDataFormReduxForm","import React, {useState} from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.css'\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport incognito from '../../../assets/images/incognito.jpeg'\nimport ProfileDataFormReduxForm from './ProfileDataForm';\nimport { saveProfile } from '../../../redux/profile-reducer';\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    const [editMode, setEditMode] = useState(false) \n\n    if(!profile) return <Preloader />\n\n    const onMainPhotoSelected = (e) => {\n        if(e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (formData) =>{\n        saveProfile(formData).then(()=>{\n            setEditMode(false)\n        })\n        \n    }\n    \n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || incognito} className={s.mainPhoto} alt=''/>\n                <div>{isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}</div>\n                \n                {editMode \n                    ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> \n                    : <ProfileData\n                        fullName={profile.fullName}\n                        lookingForAJob={profile.lookingForAJob}\n                        lookingForAJobDescription={profile.lookingForAJobDescription}\n                        aboutMe={profile.aboutMe}\n                        contacts={profile.contacts}\n                        isOwner={isOwner}\n                        goToEditMode={() => {setEditMode(true)}}/>\n\n                }\n                \n                \n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData = ({fullName, lookingForAJob, lookingForAJobDescription, aboutMe, contacts, isOwner, goToEditMode}) => {\n    return <div>\n        <div>{isOwner && <button onClick={goToEditMode}>EDIT</button>}</div>\n        <div><b>Full name: </b>{fullName}</div>\n        <div><b>Looking for a job: </b>{lookingForAJob ? 'Yes': 'No'}</div>\n        {lookingForAJob &&\n            <div><b>My skills: </b>{lookingForAJobDescription}</div>\n        }\n        <div><b>About me: </b>{aboutMe}</div>\n        <div><b>Contacts: </b>{Object.keys(contacts).map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={contacts[key]}/>\n        })}</div>\n    </div>\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n   return <div className={s.contact}><b>{contactTitle}: </b><a href='contactValue'>{contactValue}</a></div>\n}\nexport default ProfileInfo;","import s from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n        <div>\n            <div className={s.item}>\n                <img src=\"https://xmart.pl/wp-content/uploads/2015/03/man4.png\" alt=''/>\n                {props.message}\n                <div>post 1</div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import s from './Posts.module.css';\nimport Post from './Post/Post';\nimport React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\nimport { TextArea } from '../../common/FormsControls/FormsControls';\n\nconst maxLength10 = maxLengthCreator(10)\n\nconst Posts = React.memo(props => {\n    let postData = props.posts.map((i, index) => <Post key={index} message={i.message} likesCount={i.likesCount}/>);\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText)\n    }\n    return (\n        <div className={s.postBlock}>\n            my posts\n            <AddNewPostForm onSubmit={onAddPost} />\n            <div className={s.posts}>\n                {postData}\n            </div>\n            \n        </div>\n    )\n})\n\nconst PostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} name='newPostText' placeholder='Add post' validate={[required, maxLength10]}/>\n                <div>\n                    <button>Add post</button>\n                    <button>Remove</button>\n                </div>\n            </div>\n        </form>\n    )\n} \n\nconst AddNewPostForm = reduxForm({form: 'ProfileAddNewPostForm'})(PostForm)\n\nexport default Posts;","import Posts from './Posts';\nimport { addPostActionCreator} from '../../../redux/profile-reducer';\nimport { connect } from 'react-redux';\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => dispatch(addPostActionCreator(newPostText)),\n    }\n}\n\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts)\n\nexport default PostsContainer;","import ProfileInfo from \"./ProfileInfo/ProfileInfo.jsx\";\nimport PostsContainer from \"./Posts/PostsContainer\";\n\nconst Profile = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    return (\n        <div>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} \n            isOwner={isOwner} savePhoto={savePhoto} saveProfile={saveProfile}/>\n            <PostsContainer \n            //     store={props.store}\n            />\n        </div>\n\n    )\n}\n\nexport default Profile;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer'\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId)\n        userId = this.props.authorizedUserId\n        if (!userId)\n        this.props.history.push('/login')\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.match.params.userId != prevProps.match.params.userId)\n        this.refreshProfile()\n    }\n\n\n    render() {\n        return (\n            <Profile \n                {...this.props} \n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n                saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({  //ф-я возвращает объект, поэтому в круглых скобках\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    )(ProfileContainer)"],"sourceRoot":""}