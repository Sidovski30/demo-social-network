{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/Post/Post.tsx","hooks/useLocalStorage.js","components/Profile/Posts/Posts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","style","maxWidth","paddingTop","onDoubleClick","isOwner","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","handleSubmit","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","instagram","github","mainLink","twitter","vk","website","youtube","layout","name","wrapperCol","span","initialValues","remember","onFinish","autoComplete","Item","label","rules","required","message","TextArea","rows","valuePropName","Object","keys","map","key","textAlign","type","htmlType","ProfileData","goToEditMode","isModalOpen","setIsModalOpen","className","s","profileData","fullNameDesk","infoRow","marginTop","display","justifyContent","onClick","EditOutlined","title","open","footer","onCancel","contactTitle","contactValue","Contact","contact","href","ProfileInfo","savePhoto","saveProfile","Preloader","info","file","originFileObj","success","error","infoBlockWrap","xs","sm","md","infoBlock","position","width","avatar","src","photos","large","incognito","uploadBtn","Upload","showUploadList","icon","UploadOutlined","fullNameMob","ProfileDataForm","formData","then","Post","item","CloseOutlined","right","top","id","onRemove","useLocalStorage","state","setState","localStorageValue","localStorage","getItem","JSON","parse","setItem","stringify","to","removeItem","Posts","posts","useSelector","profilePage","setName","postId","filtered","filter","i","Form","useForm","form","postData","index","values","idVal","includes","length","Math","max","newPostText","resetFields","placeholder","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","React","Component","compose","connect","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/5.c77d39b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"label\":\"ProfileInfo_label__v3rdV\",\"infoRow\":\"ProfileInfo_infoRow__pq7qB\",\"avatar\":\"ProfileInfo_avatar__3xuFq\",\"mob\":\"ProfileInfo_mob__3wm6Z\",\"desk\":\"ProfileInfo_desk__2ggCB\",\"fullNameDesk\":\"ProfileInfo_fullNameDesk__2hWsD\",\"uploadBtn\":\"ProfileInfo_uploadBtn__3Dwkc\",\"fullNameMob\":\"ProfileInfo_fullNameMob__nfHLl\",\"profileData\":\"ProfileInfo_profileData__18agI\",\"infoBlockWrap\":\"ProfileInfo_infoBlockWrap__2pMW1\",\"infoBlock\":\"ProfileInfo_infoBlock__Yi3uO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2EmvQ\"};","import React, { ChangeEvent, useEffect, useState  } from \"react\";\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n    const activateEditMode = () => {\n        if(props.isOwner)\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div style={{maxWidth: 200, paddingTop: '1rem'}}>\n            {(!editMode) && \n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input \n                    onChange={onStatusChange} \n                    onBlur={deactivateEditMode} \n                    autoFocus={true} \n                    value={status}/>\n                </div>\n            }\n            \n        </div>\n    )\n    \n    \n}\n\nexport default ProfileStatusWithHooks","import React from \"react\"\nimport { ProfileType } from \"../../../types/types\"\nimport { Button, Checkbox, Form, Input } from \"antd\"\nimport TextArea from \"antd/es/input/TextArea\"\n\ntype PropsType = {\n    profile: ProfileType\n    handleSubmit: (formData: ProfileType) => void\n}\n\nconst ProfileDataFormReduxForm: React.FC<PropsType> = ({handleSubmit, profile}) => {\n    \n    const {fullName, lookingForAJob, lookingForAJobDescription, aboutMe, contacts} = profile\n    const {facebook, instagram, github, mainLink, twitter, vk, website, youtube} = contacts\n\n\n    return <Form\n        layout={'vertical'}\n        name=\"basic\"\n        \n        wrapperCol={{ span: 24}}\n        initialValues={{ remember: true, \n            fullName, \n            lookingForAJob, \n            lookingForAJobDescription,\n            aboutMe,\n            contacts: {\n                facebook,\n                instagram,\n                github,\n                mainLink,\n                twitter,\n                vk,\n                website,\n                youtube,\n            }\n        }}\n        onFinish={handleSubmit}\n        // onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n    >\n        {/* {error && <div className={ss.formSummaryError}>{error}</div>} */}\n        <Form.Item\n            label=\"Full name:\"\n            name=\"fullName\"\n            rules={[{ required: true, message: 'Please input your full name!' }]}\n        >\n            <Input />\n        </Form.Item>\n        <Form.Item\n            label=\"About me:\"\n            name=\"aboutMe\"\n            rules={[{ required: false, message: 'About me' }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n        <Form.Item label=\"Looking for a job:\" name=\"lookingForAJob\" valuePropName=\"checked\">\n            <Checkbox></Checkbox>\n        </Form.Item>\n        <Form.Item\n            label=\"My skills:\"\n            name=\"lookingForAJobDescription\"\n            rules={[{ required: true, message: '' }]}\n        >\n            <TextArea />\n        </Form.Item>\n        \n        <div><b>Contacts: </b>\n            {Object.keys(profile.contacts).map(key => {\n                return <div key={key}>\n                    <Form.Item\n                        label={key}\n                        name={['contacts',`${key}`]}\n                        rules={[{ required: false, message: '' }]}\n                    >\n                        <Input />\n                    </Form.Item>\n\n                </div>\n            })}\n        </div>\n        \n\n        <Form.Item style={{textAlign: 'end'}}>\n        <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n        </Button>\n        </Form.Item>\n    </Form>\n    // <form onSubmit={handleSubmit}>\n    //     <div><button>SAVE</button></div>\n    //     {error && <div className={ss.formSummaryError}>{error}</div>}\n    //     <div>\n    //         <b>Full name: </b> \n    //         <Field placeholder={'Full name'} name={'fullName'}  component={Input}/>\n    //     </div>\n    //     <div>\n    //         <b>Looking for a job: </b>\n    //         <Field placeholder={''} name={'lookingForAJob'}  component={Input} type='checkbox'/>\n    //     </div>\n    //     <div>\n    //         <b>My skills: </b>\n    //         <Field placeholder={'My skills'} name={'lookingForAJobDescription'}  component={TextArea}/>\n    //     </div>\n        \n    //     <div>\n    //         <b>About me: </b>\n    //         <Field placeholder={'About me'} name={'aboutMe'}  component={TextArea}/>\n    //     </div>\n\n    //     <div><b>Contacts: </b>{Object.keys(profile.contacts).map(key => {\n    //         return <div key={key} className={s.contact}>\n    //                 <b>{key}: <Field placeholder={''} name={`contacts.${key}`}  component={Input}/></b>\n    //             </div>\n    //     })}</div>\n    // </form>\n}\n\n// const ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\nexport default ProfileDataFormReduxForm","import React, { useState } from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.css'\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport incognito from '../../../assets/images/incognito.jpeg'\nimport ProfileDataFormReduxForm from './ProfileDataForm';\nimport { ContactsType, ProfileType } from '../../../types/types';\nimport { Button, Col, Image, Modal, Row } from 'antd';\nimport Upload from 'antd/es/upload/Upload';\nimport { UploadOutlined, EditOutlined } from '@ant-design/icons';\nimport type { UploadProps } from 'antd';\nimport { message } from 'antd';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) return <Preloader />\n    const onSubmit = (formData: ProfileType) => {\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    const props: UploadProps = {\n        onChange(info) {\n            if (info.file.status !== 'uploading') {\n                //@ts-ignore\n                savePhoto(info.file.originFileObj)\n            }\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`);\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`);\n            }\n        },\n    };\n\n    return (\n        <div className=\"mainFrame\">\n            <Row className={s.infoBlockWrap}>\n                <Col xs={24} sm={24} md={8}>\n                    <div className={s.infoBlock}>\n                        <div style={{ position: 'relative', width: 'fit-content' }}>\n                            <Image className={s.avatar} src={profile.photos.large || incognito} />\n                            {isOwner &&\n                                <div className={s.uploadBtn}>\n                                    <Upload {...props} showUploadList={false}>\n                                        <Button icon={<UploadOutlined />}></Button>\n                                    </Upload>\n                                </div>\n                            }\n                        </div>\n\n                        <div className={s.fullNameMob}>{profile.fullName}</div>\n                        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner} />\n                    </div>\n\n                </Col>\n                <Col xs={24} sm={24} md={16}>\n                    {editMode\n                        ? <ProfileDataFormReduxForm profile={profile} handleSubmit={onSubmit} />\n                        : <ProfileData\n                            profile={profile}\n                            isOwner={isOwner}\n                            goToEditMode={() => { setEditMode(true) }} />\n                    }\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const showModal = () => {\n        setIsModalOpen(true);\n    };\n\n    const handleCancel = () => {\n        setIsModalOpen(false);\n    };\n\n    return <div className={s.profileData}>\n        <div className={s.fullNameDesk}>{profile.fullName}</div>\n        <div className={s.infoRow}>\n            <span className={s.label}>About me: </span>\n            {profile.aboutMe}\n        </div>\n        <div className={s.infoRow}>\n            <span className={s.label}>Looking for a job: </span>\n            {profile.lookingForAJob ? 'Yes' : 'No'}\n        </div>\n        {profile.lookingForAJob &&\n            <div className={s.infoRow}>\n                <span className={s.label}>My skills: </span>\n                {profile.lookingForAJobDescription}\n            </div>\n        }\n\n        <div className={s.infoRow}>\n            <div style={{ marginTop: '1rem', display: 'flex', justifyContent: 'space-between' }}>\n                <Button type=\"primary\" onClick={showModal}>\n                    Contacts\n                </Button>\n                {isOwner && <Button onClick={goToEditMode}><EditOutlined /></Button>}\n            </div>\n\n            <Modal title=\"Contacts\" open={isModalOpen} footer={null} onCancel={handleCancel}>\n                {Object.keys(profile.contacts).map(key => {\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\n                })}\n            </Modal>\n        </div>\n    </div>\n}\n\ntype ContactsPropType = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst Contact: React.FC<ContactsPropType> = ({ contactTitle, contactValue }) => {\n    return <div className={s.contact}><span className={s.label}>{contactTitle}: </span><a href='contactValue'>{contactValue}</a></div>\n}\nexport default ProfileInfo;","import s from './Post.module.css';\nimport { CloseOutlined } from '@ant-design/icons'\n\ntype PropsType = {\n    message: string\n    onRemove: (key: number) => void\n    id: number\n    //likesCount: number\n}\nconst Post: React.FC<PropsType> = (props) => {\n    let onRemove = (e: any) => {\n        props.onRemove(e)\n    }\n    return (\n        <div>\n            <div className={s.item}>\n                <pre>{props.message}</pre>\n                {/* @ts-ignore */}\n                <CloseOutlined style={{\n                    position: 'absolute',\n                    right: '1rem',\n                    top: '1rem'\n                }} onClick={() => onRemove(props.id)}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import { useState, useEffect } from 'react'\n\nconst useLocalStorage = (key, value) => {\n  const [state, setState] = useState(value)\n  const localStorageValue = localStorage.getItem(key)\n\n  useEffect(() => {\n      if (localStorageValue) {\n          setState(JSON.parse(localStorageValue))\n      } else {\n          localStorage.setItem(key, JSON.stringify(value))\n      }\n  }, [])\n\n  const update = (to) => {\n      setState(to)\n      localStorage.setItem(key, JSON.stringify(to))\n  }\n\n  const remove = (key) => {\n      setState(null)\n      localStorage.removeItem(key)\n  }\n\n  return [state, update, remove]\n}\n\nexport default useLocalStorage","import Post from './Post/Post';\nimport React from 'react';\nimport { Button, Col, Form, Row } from 'antd';\nimport TextArea from 'antd/es/input/TextArea';\nimport { useSelector } from 'react-redux';\nimport { AppStateType } from '../../../redux/redux-store';\nimport useLocalStorage from '../../../hooks/useLocalStorage';\n\nexport type MapPropsTypes = {\n    isOwner: boolean\n}\nexport type DispatchPropsTypes = {\n    addPost: (newPostText: string) => void\n}\n\nconst Posts: React.FC<MapPropsTypes> = ({isOwner}) => {\n    const posts = useSelector((state: AppStateType) => state.profilePage.posts)\n    let [name, setName] = useLocalStorage(\"mem\", posts);\n    let onRemove = (postId: number) => {\n        let filtered = name.filter((i:any) => i.id !== postId)\n        setName(filtered)\n    }\n\n    const [form] = Form.useForm();\n    //@ts-ignore\n    let postData = name.map((i, index) => <Post key={index} id={i.id} message={i.message} onRemove={onRemove} />);\n    let onAddPost = (values: AddPostFormValuesType) => { \n        let idVal = name.map((e:any) => e.id).includes(name.length) ? Math.max(...name.map((e:any) => e.id))+1 : name.length\n        setName([...name, {id: idVal, message: values.newPostText}]);\n        form.resetFields();\n    }\n    return (\n        <div>{isOwner && \n        <div className=\"mainFrame\" style={{ marginTop: '1rem'}}>\n            <Form\n                form={form}\n                name=\"basic\"\n                wrapperCol={{ span: 24 }}\n                initialValues={{ remember: true }}\n                onFinish={onAddPost}\n                autoComplete=\"off\"\n            >\n                <Row>\n                    <Col xs={18} sm={20}>\n                        <Form.Item name=\"newPostText\">\n                            <TextArea placeholder='Add post' />\n                        </Form.Item>\n                    </Col>\n                    <Col xs={6} sm={4} style={{textAlign: 'end'}}>\n                        <Form.Item>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Send\n                            </Button>\n                        </Form.Item> \n                    </Col>\n                </Row>\n            </Form>\n\n            <Row>\n                <Col xs={24} sm={20}>\n                    <div style={{marginTop: 10}}>\n                        {postData}\n                    </div>\n                </Col>\n            </Row>\n\n            \n        </div>\n        }\n\n        </div>\n        \n    )\n}\n// const PostsMemorized = React.memo(Posts)\n\ntype AddPostFormValuesType = {\n    newPostText: string\n}\nexport default Posts;","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport Posts from \"./Posts/Posts\";\nimport { ProfileType } from \"../../types/types.js\";\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    return (\n        <div>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} \n            isOwner={isOwner} savePhoto={savePhoto} saveProfile={saveProfile}/>\n            \n            <Posts isOwner={isOwner}/>\n        </div>\n\n    )\n}\n\nexport default Profile;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer'\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { ProfileType } from \"../../types/types\";\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\ntype PathParamsType = {\n    userId: string\n}\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId: number|null = +this.props.match.params.userId;\n        if (!userId)\n        userId = this.props.authorizedUserId\n        if (!userId)\n        this.props.history.push('/login')\n        if (!userId) {\n            console.error('ID should exist in URI params or in state')\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId) \n        }\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if(this.props.match.params.userId !== prevProps.match.params.userId)\n        this.refreshProfile()\n    }\n\n    render() {\n        return (\n            <Profile \n                {...this.props} \n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n                saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    )(ProfileContainer)"],"sourceRoot":""}