{"version":3,"sources":["components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","props","className","s","messages","message","DialogItem","path","id","to","name","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","item","messagesElements","notReadyNotif","dialogsItems","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,SAAW,yBAAyB,QAAU,wBAAwB,YAAc,8B,oBCAtGD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,cAAgB,iC,6FCiBpIC,EAXqB,SAACC,GAEjC,OACI,qBAAKC,UAAWC,IAAEC,SAAlB,SACI,qBAAKF,UAAWC,IAAEE,QAAlB,SACKJ,EAAMI,a,QCMRC,EAVyB,SAACL,GACrC,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACI,8BACI,cAAC,IAAD,CAASC,GAAIF,EAAb,SAAoBN,EAAMS,U,kBCmDvBC,EA7CgB,SAACV,GAE5B,IAAIW,EAAQX,EAAMY,YACdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAYP,KAAMO,EAAKP,KAAMF,GAAIS,EAAKT,IAASS,EAAKT,OAChGU,EAAmBN,EAAMR,SAASY,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAQZ,QAASY,EAAKZ,SAAcY,EAAKT,OAK3F,OACI,sBAAKN,UAAU,YAAf,UACI,qBAAKA,UAAWC,IAAEgB,cAAlB,8KAEA,sBAAKjB,UAAWC,IAAEY,QAAlB,UACI,qBAAKb,UAAWC,IAAEiB,aAAlB,SACKN,IAEL,qBAAKZ,UAAWC,IAAEC,SAAlB,SACKc,W,QCnCN,SAASG,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,yBEZLW,EAA6B,SAACzB,GAAD,MAA0B,CACvD0B,OAAQ1B,EAAM2B,KAAKD,S,aCQRE,sBACXC,aAPkB,SAAC7B,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsB6B,ODC1B,SAAgEC,GAYnE,OAHiCF,YAC7BJ,EAA4B,GADCI,EARqC,SAACxC,GACnE,IAAKqC,EAAwBrC,EAAxBqC,OAAWM,EAAhB,EAA6B3C,EAA7B,GAEA,OAAIqC,EACG,cAACK,EAAD,eAAsBC,IADV,cAAC,IAAD,CAAUnC,GAAG,gBCNzB+B,CAEO7B","file":"static/js/4.07236b8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Dialog_messages__2V75r\",\"message\":\"Dialog_message__MLmM6\",\"messageWrap\":\"Dialog_messageWrap__2AggI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"notReadyNotif\":\"Dialogs_notReadyNotif__3xZEr\"};","import React from 'react';\nimport s from './Dialog.module.css';\n\ntype PropsType = {\n    message: string\n}\n\nconst Dialog: React.FC<PropsType> = (props) => {\n    \n    return (\n        <div className={s.messages}>\n            <div className={s.message}>\n                {props.message}\n            </div>\n        </div>\n    )\n}\n\nexport default Dialog;","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\ntype PropsType = {\n    name: string\n    id: number\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div>\n            <NavLink to={path}>{props.name}</NavLink>\n       </div>\n    )\n}\n\n\nexport default DialogItem;","import {FC} from 'react';\n// import { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport { InitialStateType } from '../../redux/dialogs-reducer';\n// import { maxLengthCreator, required } from '../../utils/validators/validators';\n// import { TextArea } from '../common/FormsControls/FormsControls';\nimport Dialog from './Dialog/Dialog';\nimport DialogItem from './DialogItem/DialogItem';\nimport s from './Dialogs.module.css';\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\n// type NewMessageFormValuesType = {\n//     newMessageBody: string\n// }\n\nconst Dialogs: FC<PropsType> = (props) => {\n    \n    let state = props.dialogsPage;\n    let dialogsElements = state.dialogs.map(item => <DialogItem name={item.name} id={item.id} key={item.id}/>)\n    let messagesElements = state.messages.map(item => <Dialog message={item.message} key={item.id}/>)\n    // let addNewMessage = (values: NewMessageFormValuesType ) => {\n    //     props.sendMessage(values.newMessageBody);\n    // }\n\n    return (\n        <div className=\"mainFrame\">\n            <div className={s.notReadyNotif}>\n                This block isn't ready yet. It is waiting for API to be ready. This component will be in charge of sending messages to a chosen user of the website.            </div>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItems}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    {messagesElements}\n                </div>\n                {/* <AddMessageFormRedux onSubmit={addNewMessage} /> */}\n            </div>\n        </div>\n        \n    )\n}\n\n\n\n// const maxLength50 = maxLengthCreator(50)\n// type AddMessagePropsType = {}\n// const AddMessageForm: FC<InjectedFormProps<NewMessageFormValuesType, AddMessagePropsType> & AddMessagePropsType>  = (props) => {\n//     return (\n//         <form onSubmit={props.handleSubmit}>\n//             <Field component={TextArea}\n//                     validate={[required, maxLength50]}\n//                     name='newMessageBody' \n//                     placeholder='Enter your message' />\n//             <div><button>Send</button></div>\n//         </form>\n//     )\n// }\n\n//const AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)\n\nexport default Dialogs","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../redux/redux-store\";\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({  //ф-я возвращает объект, поэтому в круглых скобках\n    isAuth: state.auth.isAuth\n} as MapPropsType)\n\ntype MapPropsType = {\n    isAuth: boolean\n}\ntype DispatchPropsType = {\n   \n}\n\nexport function withAuthRedirect<WCP extends JSX.IntrinsicAttributes> (WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        let {isAuth, ...restProps} = props\n         \n        if(!isAuth) return <Redirect to='/login' />\n        return <WrappedComponent {...restProps as WCP} />\n        \n    }\n    \n    let ConnectedRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\n        mapStateToPropsForRedirect, {})(RedirectComponent)\n\n    return ConnectedRedirectComponent;\n}\n\n","import { actions } from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport { compose } from 'redux';\nimport { AppStateType } from '../../redux/redux-store';\nimport React from 'react';\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage \n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {...actions}),\n    withAuthRedirect)(Dialogs)"],"sourceRoot":""}