{"version":3,"sources":["components/Users/Users.module.css","assets/images/incognito.jpeg","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","api/api.ts","api/users-api.ts","redux/users-reducer.ts","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","api/security-api.ts","api/auth-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspence.tsx","components/TopicMenu/TopicMenu.js","components/SideBar/SideBar.jsx","redux/auth-selectors.ts","components/Navbar/Navbar.tsx","App.tsx","index.js","api/profile-api.ts","components/common/Preloader/Preloader.tsx"],"names":["module","exports","initialState","posts","id","message","profile","status","actions","type","photos","getUserProfile","userId","dispatch","a","profileAPI","getProfile","data","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPostText","filter","p","postId","dialogs","name","sendMessage","newMessageBody","dialogsReducer","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChanel","messageHandler","e","forEach","s","JSON","parse","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatApi","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","length","ResultCodeForCaptcha","instance","axios","create","baseURL","withCredentials","method","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","then","res","follow","post","unfollow","delete","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","items","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","u","followed","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","simple","onChange","pageNumber","defaultCurrent","total","User","user","className","userBlock","to","style","borderRadius","marginBottom","src","small","userPhoto","photo","alt","disabled","some","onClick","fontSize","color","marginTop","UrersSearchForm","React","memo","props","Form","useForm","form","useSelector","useState","setTerm","useEffect","setFieldsValue","String","Option","Select","onFinish","values","onFilterChanged","autoComplete","xs","sm","md","Item","rules","required","placeholder","marginLeft","allowClear","value","searchBtns","htmlType","resetFields","setOnReset","Users","useDispatch","history","useHistory","reset","parsed","queryString","location","search","substring","actualPage","actualFilter","page","pathname","query","_follow","bind","_unfollow","UsersPage","Preloader","securityAPI","authAPI","email","password","rememberMe","captcha","login","isAuth","captchaUrl","getAuthUserData","responsePhoto","getCaptchaUrl","url","authReducer","Login","backgroundColor","padding","layout","labelCol","span","wrapperCol","initialValues","remember","formData","CaptchaIsRequired","onFinishFailed","errorInfo","console","log","label","Password","valuePropName","extra","gutter","noStyle","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","legacy_createStore","applyMiddleware","thunkMiddleware","withSuspence","WrappedComponent","Suspense","fallback","TopicMenu","mode","selectedKeys","SideBar","menu","Sider","breakpoint","theme","collapsedWidth","trigger","selectIsAuth","selectCurrentUserPhoto","selectAuthUserId","NavBar","phot","authUserId","open","setOpen","position","width","zIndex","lg","xl","icon","MenuOutlined","placement","onClose","display","justifyContent","Content","Layout","Footer","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedProfile","WithSuspence","SuspendedDialog","App","promise","all","flexDirection","minHeight","flex","offset","xxl","hasSider","overflow","exact","path","render","textAlign","MainApp","basename","StrictMode","ReactDOM","document","getElementById","put","FormData","append","insetInlineEnd","height","right","left","top","bottom","background","verticalAlign","alignItems"],"mappings":"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","file":"static/js/main.1d8039d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__2hOPg\",\"userBlock\":\"Users_userBlock__3uICQ\",\"searchBtns\":\"Users_searchBtns__1Qzn8\"};","export default __webpack_public_path__ + \"static/media/incognito.bf62e8b7.jpeg\";","import { PostType, ProfileType, PhotosType } from './../types/types';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { profileAPI } from '../api/profile-api';\nimport { ResultCodesEnum } from '../api/api';\nimport { InferActionsType, BaseThunkType } from './redux-store';\n\nlet initialState = {\n    posts: [\n        {id: 0, message: 'Hi, how are you?'},\n        {id: 1, message: 'It\\'s my first post'},\n        {id: 2, message: 'It\\'s my second post'},\n    ] as PostType[],\n    profile: null as ProfileType|null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'ADD-POST': return {\n                ...state,\n                posts: [...state.posts, {id: 5, message: action.newPostText}],\n        }\n        case 'SET_USER_PROFILE': return {\n                ...state,\n                profile: action.profile\n        }\n        case 'SET_STATUS': return {       // По экшену SET_STATUS мы берем текущий стейт (то что в initialState), делаем его копию,\n                ...state,               // перезаписываем и выводим новый стейт. Но поле status мы перезаписываем с новыми значениями\n                status: action.status   // которые получаем в action.status\n        }\n        case 'DELETE_POST': return {\n            ...state,\n            posts: state.posts.filter(p => p.id !== action.postId)\n        }\n        case 'SAVE_PHOTO_SUCCESS': return {\n            ...state,\n            profile: {...state.profile, photos: action.photos} as ProfileType\n        }\n        default: return state;\n    } \n}\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\n\n\nexport const addPost = (newPostText: string): ThunkType => async (dispatch) => {\n    dispatch(actions.addPostActionCreator(newPostText))\n}\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getProfile(userId);\n    dispatch(actions.setUserProfile(data))\n}\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId);\n    dispatch(actions.setStatus(data))\n}\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    let data = await profileAPI.updateStatus(status);\n    if(data.resultCode === ResultCodesEnum.Success)\n    dispatch(actions.setStatus(status))  \n}\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file);\n    if(data.resultCode === ResultCodesEnum.Success)\n    dispatch(actions.savePhotoSuccess(data.data.photos))\n} \nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId;\n    const data = await profileAPI.saveProfile(profile);\n    if(data.resultCode === ResultCodesEnum.Success) {\n        if(userId !== null) {\n            dispatch(getUserProfile(userId)) \n        } else {\n            throw new Error('userId can not be null')\n        }\n       \n    } else {\n        dispatch(stopSubmit('edit-profile', {_error: data.messages[0]}))\n        return Promise.reject(data.messages)\n    }\n}\n\nexport default profileReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsType<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import { InferActionsType } from \"./redux-store\"\n\ntype DialogType = {\n    id: number\n    name: string\n}\ntype MessageType = {\n    id: number\n    message: string\n}\nlet initialState = {\n    dialogs: [\n        {id : 0, name : 'Artem'},\n        {id : 1, name : 'Vika'},\n        {id : 2, name : 'Valya'},\n        {id : 3, name : 'Kolya'},\n        {id : 4, name : 'Dasha'},\n    ] as Array<DialogType>,\n    messages: [\n        {id : 0,  message: 'Hi, I\\'m Artem. How are you?'},\n        {id : 1, message: 'Hi, I\\'m Vika. How are you?'},\n        {id : 2,  message: 'Hi, I\\'m Valya. How are you?'},\n        {id : 3,  message: 'Hi, I\\'m Kolya. How are you?'},\n        {id : 4,  message: 'Hi, I\\'m Dasha. How are you?'},\n    ] as Array<MessageType>\n}\nconst dialogsReducer = (state = initialState, action: ActionType): InitialStateType => {\n\n    switch(action.type){\n        case 'SEND-MESSAGE': return {\n                ...state,\n                messages: [...state.messages, {id: 6, message: action.newMessageBody}]\n        }\n        default: \n            return state;\n    }\n}\n\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({type: 'SEND-MESSAGE', newMessageBody} as const)\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionType = InferActionsType<typeof actions>","\nconst subscribers = {\n    'messages-received': [] as MessagesReceivedSubscriberType[],\n    'status-changed': [] as StatusChangedSubscriberType[]\n}\n\nlet ws: WebSocket | null = null\n\ntype EventNamesType = 'messages-received' | 'status-changed'\n\nconst closeHandler = () => {\n    notifySubscribersAboutStatus('pending')\n    setTimeout(createChanel, 3000)\n}\n\nconst messageHandler = (e: MessageEvent) => {\n    subscribers['messages-received'].forEach(s => s(JSON.parse(e.data)))\n}\nconst openHandler = () => {\n    notifySubscribersAboutStatus('ready')\n}\nconst errorHandler = () => {\n    notifySubscribersAboutStatus('error')\n}\n\nconst cleanUp = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n    subscribers['status-changed'].forEach(s => s(status))\n}\nfunction createChanel() {\n    cleanUp()\n    ws?.close()\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    notifySubscribersAboutStatus('pending')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\nexport const chatApi = {\n    start() {\n        createChanel()\n    },\n    stop() {\n        subscribers['messages-received'] = []\n        subscribers['status-changed'] = []\n        cleanUp()\n        ws?.close()\n    },\n    subscribe(eventName: EventNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        //@ts-ignore\n        subscribers[eventName].push(callback)\n        return () => {\n            //@ts-ignore\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\n        }\n    },\n    unsubscribe(eventName: EventNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        //@ts-ignore\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    },\n    \n}\n\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\n\nexport type StatusType = 'pending' | 'ready' | 'error'\n\nexport type ChatMessageAPIType = {\n    message: string,\n    photo: string, \n    userId: number,\n    userName: string\n}","import { Dispatch } from 'redux';\nimport { chatApi, StatusType } from './../api/chat-api';\nimport { BaseThunkType, InferActionsType } from './redux-store';\nimport { FormAction } from \"redux-form\";\nimport { ChatMessageAPIType } from '../api/chat-api';\nimport {v1} from 'uuid'\n\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nlet initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/CHAT/MESSAGES_RECEIVED': return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))].filter((m, index, array) => index >= array.length - 100),\n            }\n        case 'SN/CHAT/STATUS_CHANGED': return {\n            ...state,\n            status: action.payload.status\n        }\n        default: return state;\n    } \n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\n        type: 'SN/CHAT/MESSAGES_RECEIVED', payload: {messages}\n    } as const),\n    statusChanged: (status: StatusType) => ({\n        type: 'SN/CHAT/STATUS_CHANGED', payload: {status}\n    } as const),\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if(_newMessageHandler === null){\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    } \n        \n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if(_statusChangedHandler === null){\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    } \n        \n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n    chatApi.start()\n    chatApi.subscribe('messages-received' ,newMessageHandlerCreator(dispatch))\n    chatApi.subscribe('status-changed' ,statusChangedHandlerCreator(dispatch))\n}\n\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n    chatApi.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatApi.subscribe('status-changed' ,statusChangedHandlerCreator(dispatch))\n    chatApi.stop()\n}\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\n    chatApi.sendMessage(message)\n}\n\n\nexport default chatReducer; \n\nexport type InitialStateType = typeof initialState\ntype ActionType = InferActionsType<typeof actions>\ntype ThunkType = BaseThunkType<ActionType | FormAction>","import axios from \"axios\";\nimport { UserType } from \"../types/types\";\n\nexport const instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    // @ts-ignore\n    method: 'post',\n    headers: {'API-KEY': 'd0cd1c70-c7ec-4a74-996b-73cc42092264'}\n})\n\n\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n}\n\nexport enum ResultCodeForCaptcha {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: UserType[]\n    totalCount: number\n    error: string|null\n}\n\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    resultCode: RC\n    messages: string[]\n}\n\n \n","import { GetItemsType, instance, ResponseType } from \"./api\"\n\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 100, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}`+(friend===null?'':`&friend=${friend}`)).then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<ResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<ResponseType>\n    },\n}","import { Dispatch } from \"redux\";\nimport { ResponseType, ResultCodesEnum } from \"../api/api\";\nimport { usersAPI } from \"../api/users-api\";\nimport { UserType } from \"../types/types\";\nimport { AppStateType, BaseThunkType, InferActionsType } from \"./redux-store\";\n\nlet initialState = {\n   users: [ ] as UserType[],\n   pageSize: 10,\n   totalUsersCount: 200,\n   currentPage: 1,\n   isFetching: false,\n   followingInProgress: [] as number[], //array of users ids\n   filter: {\n    term: '',\n    friend: null as null | boolean\n   }\n}\n\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW': \n            return {\n                ...state, \n                users: state.users.map(u => { // то же самое, что и users: [...state.users]\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                }) \n        }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state, \n                //users: [...state.users],\n                users: state.users.map(u => { // то же самое, что и users: [...state.users]\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                }) \n        }\n        case 'SN/USERS/SET_USERS': {\n            return ({...state, users: action.users})\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {...state,\n                followingInProgress: action.isFetching\n                ? [...state.followingInProgress, action.userId] \n                : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        default: return state;\n    } \n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: UserType[]) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setUsersTotalCount: (totalUsersCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', count: totalUsersCount} as const),\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const),\n}\nexport const requestUsers = (currentPage: number, \n    pageSize: number, filter: FilterType): ThunkType => async (dispatch: Dispatch<ActionsType>, getState: () => AppStateType) => {\n    dispatch(actions.toggleIsFetching(true));\n    dispatch(actions.setCurrentPage(currentPage));\n    dispatch(actions.setFilter(filter));\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\n    dispatch(actions.toggleIsFetching(false))\n    dispatch(actions.setUsers(data.items))\n    dispatch(actions.setUsersTotalCount(data.totalCount))\n    \n}\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsType> , \n                                            userId: number, \n                                            apiMethod: (userId: number) => Promise<ResponseType>, \n                                            actionCreator: (userId: number) => ActionsType) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n    if(response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actionCreator(userId))\n    }\n    \n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), actions.followSuccess)  \n}\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), actions.unfollowSuccess)\n}\n\nexport default usersReducer;\n\nexport type InitialStateType = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsType = InferActionsType<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType>","import { createSelector } from \"reselect\";\nimport { AppStateType } from \"./redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    return users.filter(u => true)\n})\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","import React from \"react\";\n\nimport { Pagination, PaginationProps } from \"antd\";\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    onPageChanged: (pageNumber: number) => void\n    currentPage: number\n    portionSize?: number\n}\nconst Paginator: React.FC<PropsType> = ({totalItemsCount, currentPage, onPageChanged}) => {\n    const onChange: PaginationProps['onChange'] = (pageNumber) => {\n        onPageChanged(pageNumber)\n      };\n\n    return <Pagination \n        simple\n        onChange={onChange}\n        defaultCurrent={currentPage} \n        total={totalItemsCount} \n    />;\n}\n\nexport default Paginator","import React from \"react\";\nimport s from './Users.module.css';\nimport userPhoto from '../../assets/images/incognito.jpeg';\nimport { NavLink } from \"react-router-dom\";\nimport { UserType } from \"../../types/types\";\nimport { Button } from \"antd\";\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: number[]\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n    return <div className={s.userBlock}>\n    <span>\n        <div>\n            <NavLink to={'/profile/' + user.id}>\n                <img style={{borderRadius: '50%', marginBottom: 4}} src={user.photos.small != null ? user.photos.small : userPhoto} \n                className={s.photo} alt=''/>\n            </NavLink>\n        </div>\n        <div>\n            {user.followed \n                ? <Button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                    unfollow(user.id)\n                }}>Unfollow</Button> \n                : <Button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\n                    follow(user.id)\n                }}>Follow</Button>}\n        </div>\n    </span>\n    <span>\n        <span>\n            <div style={{fontSize: 18}}>{user.name}</div>\n            <div style={{color: '#696969', marginTop: 4}}>{user.status}</div>\n        </span>\n    </span>\n</div>\n}\n\nexport default User","import s from './Users.module.css'\nimport { FilterType } from \"../../redux/users-reducer\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getUsersFilter } from \"../../redux/users-selectors\";\nimport { Button, Col, Form, Input, Row, Select } from \"antd\";\n\ntype FormType = {\n    term: string\n    friend: \"true\" | \"false\" | \"null\"\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n    setOnReset: (reset: boolean) => void\n}\n\nconst UrersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const [form] = Form.useForm();\n    const filter = useSelector(getUsersFilter)\n    const [term, setTerm] = useState(filter.term)\n    \n    useEffect(() => {\n        //@ts-ignore\n        setTerm(filter.term)\n        form.setFieldsValue({term: filter.term, friend: String(filter.friend) as \"true\" | \"false\" | \"null\"})\n        \n    }, [form, filter.term])\n\n    const submit = (values: FormType) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        } \n        props.onFilterChanged(filter)\n\n    }\n    const { Option } = Select;\n    \n\n    const onReset = () => {\n        form.resetFields();\n        props.setOnReset(true)\n    };\n\n    return <div className=\"mainFrame\">\n    <Form \n        form={form} \n        name=\"control-hooks\" \n        onFinish={submit}\n        autoComplete=\"off\"\n    >\n        <Row>\n            <Col xs={16} sm={10} md={12}>\n                <Form.Item name=\"term\" rules={[{ required: true }]} style={{marginBottom: 0}}>\n                    <Input placeholder=\"Developers\"/>\n                </Form.Item>\n            </Col>\n            <Col xs={8} sm={6} md={4}>\n                <Form.Item name=\"friend\" rules={[{ required: true }]} style={{marginBottom: 0, marginLeft: '1rem'}}>\n                    <Select placeholder=\"Select an option\" allowClear>\n                        <Option value=\"null\">All</Option>\n                        <Option value=\"true\">Followed</Option>\n                        <Option value=\"false\">Unfollowed</Option>\n                    </Select>\n                </Form.Item>\n            </Col>\n            <Col xs={14} sm={8} md={8} >\n                <Row className={s.searchBtns}>\n                    <Col xs={9} sm={12} md={10}>\n                        <Form.Item style={{ marginBottom: 0}}>\n                            <Button type=\"primary\" htmlType=\"submit\" >\n                                Search\n                            </Button>\n                        </Form.Item>\n                    </Col>\n                    <Col xs={9} sm={12} md={10}>\n                        <Form.Item style={{ marginBottom: 0, marginLeft: '1rem' }}>\n                            <Button htmlType=\"button\" onClick={onReset}>\n                                Reset\n                            </Button>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                \n            </Col>\n        </Row>\n\n    </Form>\n    </div>\n})\n\nexport default UrersSearchForm","import {FC, useEffect, useState} from \"react\";\nimport { useSelector, useDispatch  } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { AppDispatch } from \"../../redux/redux-store\";\nimport { FilterType, requestUsers, follow, unfollow } from \"../../redux/users-reducer\";\nimport { getCurrentPage, getPageSize, getTotalUsersCount, getUsersFilter, getUsers, getFollowingInProgress} from \"../../redux/users-selectors\";\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\nimport UrersSearchForm from \"./UsersSearchForm\"\nimport * as queryString from 'querystring'\n\ntype PropsType = {}\ntype QueryParamsType = {\n    term?: string\n    page?: string\n    friend?: string\n}\n\nexport const Users: FC<PropsType> = () => {\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch: AppDispatch = useDispatch()\n    const history = useHistory()\n\n    const [reset, setOnReset] = useState(false)\n    \n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substring(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n        if(!!parsed.page) actualPage = +parsed.page\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n        if(!!parsed.friend) actualFilter = {...actualFilter, friend: parsed.friend === 'null' ? null : parsed.friend === 'true'? true : false}\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        if(reset) {\n            history.push({\n                pathname: '/developers',\n                search: ``\n            })\n            filter.friend = null\n            filter.term = ''\n            dispatch(requestUsers(1, pageSize, filter))\n        } else {\n            history.push({\n                pathname: '/developers',\n                search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\n            })\n        }\n    }, [filter, currentPage, reset])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n        if(!!filter.term) query.term = filter.term\n        if(filter.friend !== null) query.friend = String(filter.friend)\n        if(currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query)\n        })\n\n\n    }, [filter, currentPage])\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n\n    const onFilterChanged = (filter: FilterType) =>  {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n\n    const _follow = (userId: number) => {\n        dispatch(follow(userId))\n    } \n    const _unfollow = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n    return <div>\n        <UrersSearchForm onFilterChanged={onFilterChanged} setOnReset={setOnReset} />\n        <div className=\"mainFrame\" style={{ marginTop: '1rem'}}>\n            <Paginator currentPage={currentPage} totalItemsCount={totalUsersCount} \n                    pageSize={pageSize} onPageChanged={onPageChanged}/>\n            {users.map(u => <User key={u.id} user={u} followingInProgress={followingInProgress} \n            unfollow={_unfollow} follow={_follow} />)}\n        </div>\n    </div>\n}\n","import React from \"react\";\nimport {Users} from \"./Users\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {getIsFetching} from \"../../redux/users-selectors\";\nimport { useSelector } from \"react-redux\";\n\n\n\ntype UsersPagePropsType = {\n    \n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = () => {\n\n    const isFetching = useSelector(getIsFetching)\n\n    return <>\n    {isFetching ? <Preloader/> : null}\n    <Users /> \n    </>\n}\n","import { instance } from \"./api\"\n\ntype GetCaptchaUrlResponseType = {url: string}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\n    }\n}","import { instance, ResponseType, ResultCodesEnum, ResultCodeForCaptcha } from \"./api\"\n\ntype MeResponseType = {\n    id: number, email: string, login: string\n}\ntype LoginResponseType = {\n   userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<ResponseType<MeResponseType, ResultCodesEnum>>(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null|string = null) {\n        return instance.post<ResponseType<LoginResponseType, ResultCodesEnum|ResultCodeForCaptcha>>(`auth/login`, {email, password, rememberMe, captcha}).then(res => res.data)\n\n    },\n    logout() {\n        return instance.delete(`auth/login`).then(res => res.data)\n    }\n}","import { BaseThunkType, InferActionsType } from './redux-store';\nimport { ResultCodeForCaptcha } from './../api/api';\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { ResultCodesEnum } from \"../api/api\";\nimport { securityAPI } from '../api/security-api';\nimport { authAPI } from '../api/auth-api';\nimport { profileAPI } from '../api/profile-api';\n\nlet initialState = {\n    userId: null as number|null,\n    email: null as string|null,\n    login: null as string|null,\n    isAuth: false,\n    photo: null as string|null,\n    captchaUrl: null as string|null\n}\nexport type InitialStateType = typeof initialState\n\ntype ActionType = InferActionsType<typeof actions>\n\ntype ThunkType = BaseThunkType<ActionType | FormAction>\n\n\nconst authReducer = (state = initialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        case 'samurai-network/auth/SET_USER_DATA': \n        case 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS': return {\n                ...state,\n                ...action.payload,\n            }\n        default: return state;\n    } \n}\n\nexport const actions = {\n    setAuthUserData: (userId: number|null, email: string|null, login: string|null, isAuth: boolean, photo: string|null) => ({\n        type: 'samurai-network/auth/SET_USER_DATA' , payload: {userId, email, login, isAuth, photo}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({type: 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let data = await authAPI.me();\n    if(data.resultCode === ResultCodesEnum.Success){\n        let {id, login, email} = data.data\n        let responsePhoto = await profileAPI.getProfile(id);\n        let photo = responsePhoto.photos.small\n        dispatch(actions.setAuthUserData(id, email, login, true, photo));\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkType => async (dispatch) => {\n    const data = await authAPI.login(email, password, rememberMe, captcha);\n    if(data.resultCode === ResultCodesEnum.Success){\n        dispatch(getAuthUserData())\n    } else {\n        if(data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl())\n        }\n        let message = data.messages.length > 0 ? data.messages[0] : 'Some error'\n        dispatch(stopSubmit('login', {_error: message}))\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl();\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n\n}\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    let response = await authAPI.logout();\n    if(response.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false, null));\n    }\n}\n\nexport default authReducer; ","import React from \"react\";\nimport { login } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, Checkbox, Col, Form, Input, Row } from 'antd';\n\n// type LoginFormOwnProps = {\n//     captchaUrl: string|null\n// }\n\nexport const Login: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch: AppDispatch = useDispatch()\n    \n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n    if (isAuth) {\n        return <Redirect to='/profile' />\n    }\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo);\n    };\n    return (\n        <div style={{ backgroundColor: '#fff', borderRadius: '12px', padding: '2rem'}}>\n            <Form\n            layout={'vertical'}\n            name=\"basic\"\n            labelCol={{ span: 12 }}\n            wrapperCol={{ xs: { span: 24 }, sm: { span: 10 } }}\n            initialValues={{ remember: true }}\n            onFinish={onSubmit}\n            onFinishFailed={onFinishFailed}\n            autoComplete=\"off\"\n            >\n            <Form.Item\n                label=\"E-mail\"\n                name=\"email\"\n                rules={[\n                    {\n                      type: 'email',\n                      message: 'The input is not valid E-mail!',\n                    },\n                    {\n                      required: true,\n                      message: 'Please input your E-mail!',\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Password\"\n                name=\"password\"\n                rules={[{ required: true, message: 'Please input your password!' }]}\n            >\n                <Input.Password />\n            </Form.Item>\n\n            <Form.Item name=\"rememberMe\" valuePropName=\"rememberMe\" wrapperCol={{ span: 16 }}>\n                <Checkbox>Remember me</Checkbox>\n            </Form.Item>\n            {captchaUrl && <img src={captchaUrl} alt=''/>}\n            {captchaUrl && \n                <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n                    <Row gutter={8}>\n                    <Col span={12}>\n                        <Form.Item\n                        name=\"captcha\"\n                        noStyle\n                        rules={[{ required: true, message: 'Please input the captcha you got!' }]}\n                        >\n                        <Input />\n                        </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                        <Button>Get captcha</Button>\n                    </Col>\n                    </Row>\n                </Form.Item>\n            }\n            <Form.Item wrapperCol={{ span: 16 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                Submit\n                </Button>\n            </Form.Item>\n            \n            </Form>\n        </div>\n        \n        \n    )\n}\n\ntype LoginFormValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\n\n","import { InferActionsType } from './redux-store';\nimport { getAuthUserData } from \"./auth-reducer\";\n\nlet initialState = {\n    initialized: false,\n}\n\nexport type InitialStateType = typeof initialState\n\ntype ActionsType = InferActionsType<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'INITIALIZED_SUCCESS': return {\n                ...state,\n                initialized: true,\n            }\n        default:\n            return state;\n    } \n}\n\nconst actions = {\n    initializedSuccess: () => ({type: 'INITIALIZED_SUCCESS'} as const) \n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData())\n    Promise.all([promise]).then(() => {\n        dispatch(actions.initializedSuccess())\n    })\n}\n\nexport default appReducer;","let initialState = {}\n\nexport type InitialStateType = typeof initialState\nexport const sidebarReducer = (state = initialState, action: any): InitialStateType => {\n    return state;\n}\n\nexport default sidebarReducer;","import { ThunkAction } from 'redux-thunk';\nimport {applyMiddleware, combineReducers, legacy_createStore, compose, Action} from 'redux';\nimport profileReducer from './profile-reducer';\nimport dialogsReducer from './dialogs-reducer';\nimport sidebarReducer from './sidebar-reducer';\nimport usersReducer from './users-reducer';\nimport authReducer from './auth-reducer';\nimport thunkMiddleware from 'redux-thunk';\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from './app-reducer';\nimport chatReducer from './chat-reducer';\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n    chat: chatReducer\n});\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsType<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\n\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = legacy_createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\nexport type AppDispatch = typeof store.dispatch\n// let store = legacy_createStore(reducers, applyMiddleware(thunkMiddleware));\n\nexport default store; ","import React from \"react\";\nimport Preloader from \"../components/common/Preloader/Preloader\";\n\nfunction withSuspence<WCP extends JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>){\n    return (props: WCP) => {\n      return <React.Suspense fallback={<Preloader />}>\n      <WrappedComponent {...props} />\n    </React.Suspense>\n  }\n} \nexport default withSuspence","import {Menu} from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"../SideBar/SideBar.css\"\n\nconst TopicMenu = () => {\n  \n  \n  return (\n    <Menu mode=\"inline\" className=\"sidebar\" selectedKeys={\"\"}\n      items={[\n        {\n          label: (\n            <Link to='/profile'>Profile</Link>\n          ),\n        },\n        {\n          label: (\n            <Link to='/dialogs'>Messages</Link>\n          ),\n        },\n        {\n          label: (\n            <Link to='/developers'>Developers</Link>\n          ),\n        },\n        {\n          label: (\n            <Link to='/chat'>Chat</Link>\n          ),\n        },\n      ]}\n    />\n      \n  );\n}\nexport default TopicMenu;\n\n\n","import { Layout } from \"antd\";\nimport \"./SideBar.css\"\nconst SideBar = ({ menu }) => {\n  return (\n    <Layout.Sider\n      className=\"sidebar\"\n      breakpoint={\"lg\"}\n      theme=\"light\"\n      collapsedWidth={0}\n      trigger={null}\n    >\n      {menu}\n   </Layout.Sider>\n   );\n};\nexport default SideBar;","import { AppStateType } from \"./redux-store\";\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}\nexport const selectCurrentUserPhoto = (state: AppStateType) => {\n    return state.auth.photo\n}\nexport const selectAuthUserId = (state: AppStateType) => {\n    return state.auth.userId\n}","import React, { useState } from \"react\";\nimport { Drawer, Button, Row, Col, Avatar } from \"antd\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport \"./NavBar.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectAuthUserId, selectCurrentUserLogin, selectCurrentUserPhoto, selectIsAuth } from \"../../redux/auth-selectors\";\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\nimport { useDispatch } from \"react-redux\";\nimport { logout } from \"../../redux/auth-reducer\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport { Header } from \"antd/es/layout/layout\";\n\nconst NavBar: React.FC = ({ menu }: any) => {\n    const isAuth = useSelector(selectIsAuth)\n    const photo = useSelector(selectCurrentUserPhoto)\n    const phot = useSelector((state: AppStateType) => state.profilePage.profile)\n    const authUserId = useSelector(selectAuthUserId)\n    const dispatch: AppDispatch = useDispatch()\n    const [open, setOpen] = useState(false);\n\n    const logutCallback = () => {\n        dispatch(logout())\n    }\n    if(!isAuth) \n    <Redirect to={\"/login\"} />\n\n    return (<>\n        {!isAuth && <Redirect to={\"/login\"} />}\n        <Header style={{\n            position: 'fixed',\n            width: '-webkit-fill-available',\n            zIndex: 2\n        }}>\n            <Row>\n                <Col xs={10} md={17} lg={18} xl={19}>\n                    <Button\n                        className=\"menu\"\n                        type=\"primary\"\n                        icon={<MenuOutlined />}\n                        onClick={() => setOpen(true)}\n                    />\n                    <Drawer\n                        placement=\"left\"\n                        onClose={() => setOpen(false)}\n                        open={open}\n                    >\n                        <div onClick={() => setOpen(false)}>{menu}</div>\n                    </Drawer>\n                </Col>\n                <Col xs={14} md={7} lg={6} xl={5} style={{ display: 'flex', justifyContent: 'end' }}>\n                    <Row>\n                        {/* <span style={{color: '#fff', paddingRight: '1rem'}}>{login}</span> */}\n                        {(isAuth)\n                            ? <div>\n                                <Avatar src={phot?.userId === authUserId ? phot.photos.small : photo} />\n                                <Button onClick={logutCallback} style={{ marginLeft: '1rem' }}>Logout</Button>\n                            </div>\n                            : <NavLink to={\"/login\"}>Login</NavLink>}\n                    </Row>\n                </Col>\n            </Row>\n        </Header>\n    </>\n\n    );\n};\nexport default NavBar;\n","import './App.css';\nimport 'antd/dist/reset.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport {UsersPage} from './components/Users/UsersPage';\nimport {Login} from './components/Login/Login';\nimport React, {FC, useEffect} from 'react';\nimport {initializeApp} from './redux/app-reducer'\nimport Preloader from './components/common/Preloader/Preloader';\nimport store, { AppDispatch, AppStateType } from './redux/redux-store';\nimport WithSuspence from './hoc/withSuspence';\nimport { Switch, Redirect} from 'react-router-dom';\nimport { Col, Layout, Row } from 'antd';\nimport { useSelector, useDispatch, Provider } from 'react-redux';\nimport TopicMenu from './components/TopicMenu/TopicMenu';\nimport SideBar from './components/SideBar/SideBar';\nimport NavBar from './components/Navbar/Navbar';\nconst { Content, Footer } = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\n\nconst SuspendedProfile = WithSuspence(ProfileContainer)\nconst SuspendedDialog = WithSuspence(DialogsContainer)\n\nconst App: FC = () => {\n  const dispatch: AppDispatch = useDispatch()\n  const initialized = useSelector((state: AppStateType) => state.app.initialized)\n  \n  useEffect(() => {\n    dispatch(initializeApp())\n  }, [dispatch])\n  if (!initialized)\n  return <Preloader />\n\n  return (\n    <Layout style={{display: 'flex', flexDirection: 'column', minHeight: '100vh'}}>\n      {/* @ts-ignore */}\n      <NavBar menu={<TopicMenu />} />\n      <Row style={{flex:1}}>\n        <Col xs={24} sm={24} md={{span: 22, offset: 1}} lg={{span: 22, offset: 1}} xl={{span: 18, offset: 3}} xxl={{span: 14, offset: 5}}>\n          <Content style={{ padding: '64px 0px 0' }}>\n            <Layout hasSider className=\"site-layout-background\" style={{ padding: '24px 0 0' }}>\n              <SideBar menu={<TopicMenu />} />\n              <Layout className=\"site-layout-background\">\n                <Content style={{ padding: '0 1rem', minHeight: 280, overflow: 'initial' }}>\n                  <Switch>\n                    <Route exact path='/' render={() => <Redirect to=\"/profile\" />} />\n                    <Route exact path='/profile/:userId?' render={() => <SuspendedProfile/>} />\n                    <Route path='/dialogs' render={() => <SuspendedDialog/>}/>\n                    <Route path='/developers' render={() => <UsersPage /> } />\n                    <Route exact path='/login' render={() => <Login /> } />\n                    <Route exact path='/chat' render={WithSuspence(ChatPage)} />\n                    <Route path='*' render={() => <div>404 PAGE NOT FOUND</div>} />\n                  </Switch>\n                </Content>\n              </Layout>\n            </Layout>\n          </Content>\n        </Col>\n      </Row>\n      \n\n      <Footer style={{ textAlign: 'center', padding: '16px 50px' }}>React Social Network App©2022 Created by Artem Blyzniakov</Footer>\n    </Layout>\n  )\n}\n\n\nconst MainApp: FC = () => {\n  return <HashRouter basename =\"/\">\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </HashRouter>\n} \n\nexport default MainApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\n\nReactDOM.render(\n  <MainApp />, document.getElementById('root')\n);\n\n\n","import { instance, ResponseType } from \"./api\"\nimport { PhotosType, ProfileType } from \"../types/types\";\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<ResponseType>(`profile/status`, {status: status}).then(res => res.data)\n    },\n    savePhoto(photo: File) {\n        const formData = new FormData()\n        formData.append('image', photo)\n        return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data)\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<ResponseType>(`profile`, profile).then(res => res.data)\n    },\n}","import { Spin } from 'antd'\nimport React from 'react'\n\nconst Preloader: React.FC = () => (\n    <div style={{ \n        position: 'fixed',\n        insetInlineEnd: 0,\n        height: '100vh',\n        width: '100vw',\n        textAlign: 'center',\n        right: 0,\n        left: 0,\n        top: 0,\n        bottom: 0,\n        background: 'rgba(0, 0, 0, 0.3)',\n        display: 'flex',\n        justifyContent: 'center',\n        zIndex: 9999,\n        verticalAlign: 'center',\n        alignItems: 'center'\n    }}>\n        <Spin />\n    </div>\n)\n\nexport default Preloader\n"],"sourceRoot":""}